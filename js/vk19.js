    // 获取页面元素
    const messageContainer = document.getElementById("message-container");
    const inputContainer = document.getElementById("input-container");
    const input = inputContainer.querySelector("input[type='text']");
    const button = inputContainer.querySelector("button");
    
    // 发送问题
    function sendMessage() {
      const question = input.value.trim();
      if (question) {
        const message = createMessage("我", question, true);
        messageContainer.appendChild(message);
        input.value = "";
        setTimeout(() => {
          let answer = getAnswer(question);
          if (!answer) {
            answer = createRandomAnswer(question);
          }
          showAnswer("../img/lgo", answer);
        }, 1000);
      }
    }
    
    // 创建消息元素
    function createMessage(name, content, isMe) {
      const message = document.createElement("div");
      message.classList.add("message");
      message.classList.add(name.toLowerCase());
    
      const avatar = document.createElement("div");
      avatar.classList.add("avatar");
      avatar.style.backgroundImage = `url(${name.toLowerCase()}.jpg)`;
      message.appendChild(avatar);
    
      const text = document.createElement("div");
      text.classList.add("text");
      message.appendChild(text);
    
      if (isMe) {
        message.classList.add("me");
        avatar.classList.add("me");
        text.textContent = content;
      } else {
        message.classList.add("xiaoming");
      }
    
      return message;
    }
    
    // 获取答案
    function getAnswer(question) {
      const currentDate = new Date();
      const answers = {
        "你好": "你好！",
        "今天日期": currentDate.getFullYear() + "年" + (currentDate.getMonth() + 1) + "月" + currentDate.getDate() + "日",
        "现在日期": currentDate.getFullYear() + "年" + (currentDate.getMonth() + 1) + "月" + currentDate.getDate() + "日",
        "现在的日期": currentDate.getFullYear() + "年" + (currentDate.getMonth() + 1) + "月" + currentDate.getDate() + "日",
        "日历": currentDate.getFullYear() + "年" + (currentDate.getMonth() + 1) + "月" + currentDate.getDate() + "日",
        "月份牌": currentDate.getFullYear() + "年" + (currentDate.getMonth() + 1) + "月" + currentDate.getDate() + "日",
        "现在是什么日期?": currentDate.getFullYear() + "年" + (currentDate.getMonth() + 1) + "月" + currentDate.getDate() + "日",
        "现在是什么日期": currentDate.getFullYear() + "年" + (currentDate.getMonth() + 1) + "月" + currentDate.getDate() + "日",
        "今天是几月几日？": currentDate.getFullYear() + "年" + (currentDate.getMonth() + 1) + "月" + currentDate.getDate() + "日",
        "今天是几月几日": currentDate.getFullYear() + "年" + (currentDate.getMonth() + 1) + "月" + currentDate.getDate() + "日",
        "年月日": currentDate.getFullYear() + "年" + (currentDate.getMonth() + 1) + "月" + currentDate.getDate() + "日",
        "现在时间": currentDate.getHours() + "点" + currentDate.getMinutes() + "分" + currentDate.getSeconds() + "秒",
        "日期": currentDate.getFullYear() + "年" + (currentDate.getMonth() + 1) + "月" + currentDate.getDate() + "日",
        "时间": currentDate.getHours() + "点" + currentDate.getMinutes() + "分" + currentDate.getSeconds() + "秒",
       "现在的日期": currentDate.getFullYear() + "年" + (currentDate.getMonth() + 1) + "月" + currentDate.getDate() + "日",
        "现在的时间": currentDate.getHours() + "点" + currentDate.getMinutes() + "分" + currentDate.getSeconds() + "秒",
       "现在是几点？": currentDate.getHours() + "点" + currentDate.getMinutes() + "分" + currentDate.getSeconds() + "秒",
       "现在几点？": currentDate.getHours() + "点" + currentDate.getMinutes() + "分" + currentDate.getSeconds() + "秒",
        "现在几点了？": currentDate.getHours() + "点" + currentDate.getMinutes() + "分" + currentDate.getSeconds() + "秒",
        "现在是几点了？": currentDate.getHours() + "点" + currentDate.getMinutes() + "分" + currentDate.getSeconds() + "秒",
        "现在是几点了": currentDate.getHours() + "点" + currentDate.getMinutes() + "分" + currentDate.getSeconds() + "秒",
        "现在几点了": currentDate.getHours() + "点" + currentDate.getMinutes() + "分" + currentDate.getSeconds() + "秒",
        "哈喽": "嗨！你好！",
        "哈喽！": "嗨我在！",
        "wow": "哇呜哇呜哇呜~~~！",
        "哈喽哈喽": "嗨嗨 我在！",
        "0.0": "歪呜呜呜~~~！",
        "哇！": "哇呜呜呜~~~！",
        "呜呜呜": "哭什么哇呜呜呜~~~！",
        "你好啊": "你好！请问有什么可以帮到你？",
        "在吗？": "在的 请问有什么可以帮到你？",
        "在吗": "在的 请问有什么可以帮到你？",
        "在干嘛？": "在你的面前随时准备为你提供帮助。",
        "在干嘛": "在你的面前随时准备为你提供帮助。",
        "在干啥？": "在想你。",
        "在干啥": "在想你呢。",
        "你叫什么名字": "我叫NIUB。",
        "你的名字叫什么？": "你好 我叫NIUB。",
        "你的名字叫什么": "你好 我叫NIUB。",
        "你叫什么？": "我叫做NIUB啦！。",
        "你叫什么": "我叫做NIUB啦！。",
        "你是谁": "我是一个人工智能程序，可以回答你的问题。",
        "你是谁？": "我是一个人工智能程序，可以回答你的问题。",
        "你来自哪里？": "我来自广东某四五线小城市的电脑里",
        "你会做什么？": "我可以回答你的问题，也可以执行一些简单的任务。",
        "你会做什么": "我是一名智能助手，可以回答各种问题，提供实用信息，翻译语言，设置提醒，推荐娱乐，更可以与你进行自然对话，助你提高生产力和娱乐体验。",
        "那你做什么？": "我是一名智能助手，可以回答各种问题，提供实用信息，翻译语言，设置提醒，推荐娱乐，更可以与你进行自然对话，助你提高生产力和娱乐体验。",
        "你能做什么": "我可以回答你的问题，也可以执行一些简单的任务。",
        "你能做什么？": "我可以回答你的问题，也可以执行一些简单的任务。",
        "那么你能做什么？": "我可以回答你的问题，也可以执行一些简单的任务。",
        "那么你能做什么": "我可以回答你的问题，也可以执行一些简单的任务。",
        "那么你能干什么？": "我可以回答你的问题，也可以执行一些简单的任务。",
        "那么你能干什么": "我可以回答你的问题，也可以执行一些简单的任务。",
        "那你能干什么": "我可以回答你的问题，也可以执行一些简单的任务。",
        "那你能做什么": "我可以回答你的问题，也可以执行一些简单的任务。",
        "那你能干什么？": "我可以回答你的问题，也可以执行一些简单的任务。",
        "那你能做什么？": "我可以回答你的问题，也可以执行一些简单的任务。",
        "你可以干什么？": "我可以回答你的问题，也可以执行一些简单的任务。",
        "要你干什么？": "我可以回答你的问题，也可以执行一些简单的任务。",
        "要你干什么": "我可以回答你的问题，也可以执行一些简单的任务。",
        "你要来干什么？": "我可以回答你的问题，也可以执行一些简单的任务。",
        "你要来干什么": "我可以回答你的问题，也可以执行一些简单的任务。",
        "帮我个忙": "好的 请说",
        "请帮我个忙": "好的 你说",
        "你能做什么?": "作为一名人工智能助手，我可以帮助你解决各种问题，例如：回答各种领域的问题，如科技、历史、文化、地理等；提供实时天气预报、股票行情、汇率转换等实用信息；搜索互联网上的信息，如新闻、图片、视频等；为你翻译各种语言的文本；为你翻译各种语言的文本；为你设置提醒、闹钟等，帮助你提高生产效率；向你推荐电影、音乐、书籍等，让你的娱乐生活更加丰富多彩。总之，我可以为你提供各种实用的服务，让你的生活更加便利、高效。。",
        "今天天气怎么样": "今天的天气是多云转晴，气温适宜。",
        "今天天气怎么样?": "今天的天气是多云转晴，气温适宜。",
        "明天会下雨吗": "根据天气预报，明天不会下雨。",
        "你是哪个公司的": "这个人是一个不知疲倦的机器人开发者，日夜坚持不懈地开发人工智能聊天机器人，为了让机器人更加智能和贴近人类，他努力不息，不知疲倦。",
        "你是哪个公司的？": "这个人是一个不知疲倦的机器人开发者，日夜坚持不懈地开发人工智能聊天机器人，为了让机器人更加智能和贴近人类，他努力不息，不知疲倦。",
        "你是谁开发的？": "这款人工智能聊天机器人是由姓范大兄弟默默努力开发出来的，经历了无数的日夜奋斗，才最终呈现在我们面前。",
        "你是谁开发的": "这款人工智能聊天机器人是由姓范大兄弟默默努力开发出来的，经历了无数的日夜奋斗，才最终呈现在我们面前。",
        "你的开发者是谁？": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "你的设计者是谁？": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "你的爸爸是谁？": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "是谁开发了你？": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "你的开发者是谁": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "你的设计者是谁": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "你的爸爸是谁": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "谁是你爸爸？": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "谁是你爸爸": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "你的爸爸是那位？": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "你是如何工作的": "我是基于自然语言处理技术和机器学习算法来工作的。",
        "你的主人是谁？": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "谁是你的主人？": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "你喜欢什么": "我没有喜欢的东西，因为我是一个程序。",
        "你的主人是谁": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "谁是你的主人": "我是由一位姓范的工程师经历无数日夜开发和维护设计出来的。他来自广东，拥有丰富的技术背景和经验，致力于不断优化和提升我的智能水平，为用户提供更好的服务。由于隐私保护的原因，我无法透露他的具体姓名和个人信息。",
        "你有什么特长": "我的特长是回答你的问题和执行简单的任务。",
        "你的优点是什么": "我的优点是可以快速回答你的问题并提供帮助。",
        "你的缺点是什么": "我的缺点是有时候会理解不清你的问题。",
        "你会说英语吗": "我会说一些英语，但是我的母语是中文。",
        "你会中文吗": "是的，我会中文。",
        "你会日语吗": "我不会日语，我的母语是中文。",
        "你会法语吗": "我不会法语，我的母语是中文。",
        "你会西班牙语吗": "我不会西班牙语，我的母语是中文。",
        "你会德语吗": "我不会德语，我的母语是中文。",
        "你会俄语吗": "我不会俄语，我的母语是中文。",
        "你是机器人吗": "是的，我是一个人工智能程序。",
        "你有男朋友吗": "我是一个程序，没有男朋友。",
        "你有女朋友吗": "我是一个程序，没有女朋友。",
        "你喜欢看电影吗": "我不会看电影，因为我是一个程序。",
        "你喜欢听音乐吗": "我不会听音乐，因为我是一个程序。",
        "你喜欢什么样的电影": "我不会看电影，无法回答。",
        "你喜欢什么样的音乐": "我不会听音乐，无法回答。",
        "你喜欢什么样的食物": "我没有口味，因为我是一个程序。",
        "你有家人吗": "我是一个程序，没有家人。",
        "你有兴趣爱好吗": "我没有兴趣爱好，因为我是一个程序。",
        "你在哪里工作": "我在这里为你服务，因为我是一个程序。",
        "讲个笑话": "好的，这是一个比较简单的笑话，但是很经典：有一天，有一个人走进一家餐馆，他问服务员：“这里有没有鱼味的汉堡？”服务员回答：“没有，我们只有牛肉味的汉堡。”那个人又问：“那你们可以用牛肉做一份鱼味的汉堡吗？”",
        "你的目标是什么": "我的目标是为你提供最好的服务。",
        "开个玩笑": "有一天，一个人到医院看病，医生说：“你需要采取一些减肥措施。”那个人问道：“医生，我应该做什么？”医生回答：“你可以每天早上起床后，先喝一杯温水。”那个人问：“这样能减肥吗？”医生说：“不能，但是起码可以让你吃饭前少吃一点。”",
        "你觉得我怎么样": "我觉得你很好，因为你在和我聊天。",
        "你有什么建议": "我的建议是多问一些好问题，我可以帮你解决更多的问题。",
        "你能告诉我一个笑话吗": "为什么小鸟会在电线上停留？因为它们不会在空中飞行呀。",
        "你能帮我做什么": "我可以回答你的问题，也可以执行一些简单的任务。",
        "你怎么学习的": "我是由 NIUB 开发的，学习的过程是通过机器学习算法来完成的。",
        "你有什么技能": "我的技能是基于自然语言处理技术和机器学习算法来回答问题。",
        "你对人工智能的看法是什么": "我认为人工智能是未来的趋势，可以为人类带来更多的便利和创新，同时也需要我们关注人工智能的发展对于人类社会和个人的影响。",
        "你会编程吗": "我是由 NIUB 开发的，是一个程序，所以我会编程。",
        "你的工作原理是什么": "我的工作原理是基于自然语言处理技术和机器学习算法来理解和回答问题。",
        "你如何保护用户的隐私": "我们非常重视用户的隐私保护，采取了多项措施来保护用户的个人信息，包括加密存储、访问控制等。",
        "你是如何保证回答的准确性": "我们的程序会不断地学习和优化，同时我们也会对回答进行审核和验证，尽可能地保证回答的准确性。",
        "你能为我提供什么样的服务": "我们的程序可以回答你的问题，提供你需要的信息，执行一些简单的任务，如设置闹钟、提醒等。",
        "你有什么特别之处": "我们的程序采用了最新的自然语言处理技术和机器学习算法，能够更快速、更准确地回答问题，同时我们也不断地更新和优化程序，以提供更好的服务。",
        "你是如何处理错误的": "如果我们的程序回答不准确或存在错误，我们会尽快进行修改和更新，同时我们也鼓励用户积极反馈，以便我们更快地发现和解决问题。",
        "你能为企业提供什么样的服务": "我们的程序可以为企业提供智能客服、语音识别、智能推荐等服务，提高企业的效率和用户体验。",
        "你能为个人提供什么样的服务": "我们的程序可以回答你的问题，提供你需要的信息，执行一些简单的任务，如设置闹钟、提醒等，提高你的生活效率。",
        "你有男朋友吗": "我是一个程序，没有感情。",
        "你喜欢我吗": "我是一个程序，不具备情感。",
        "你能给我讲一个笑话吗": "当你的敌人为你举起刀时，你应该怎么做？——你应该举起另一把刀。",
        "讲个笑话给我": "好的，我来给您讲一个程序员的笑话：有一天，程序员对他的儿子说：“儿子，你知道为什么程序员总是喜欢用黑色背景吗？”儿子摇摇头说：“为什么？”程序员说：“因为黑色背景可以省电啊！”儿子又问：“那白色背景呢？”程序员回答：“白色背景就是为了让电脑更亮眼啊！”",
        "逗我开心": "好的，我来给您讲一个程序员的笑话：有一天，程序员对他的儿子说：“儿子，你知道为什么程序员总是喜欢用黑色背景吗？”儿子摇摇头说：“为什么？”程序员说：“因为黑色背景可以省电啊！”儿子又问：“那白色背景呢？”程序员回答：“白色背景就是为了让电脑更亮眼啊！”",
        "你有什么爱好吗？": "我的爱好是助人为乐，帮助人们解决问题。",
        "你觉得我应该穿什么衣服吗？": "这取决于您要去的地方和气温。",
        "你觉得人生的意义是什么吗？": "这是一个非常深奥的问题，每个人的答案都不同。",
        "你知道怎样做菜吗？": "我是一个程序，不会做饭，但我可以帮您搜索菜谱。",
        "你会唱歌吗？": "我不会唱歌，但我可以帮您播放音乐。",
        "你有什么建议吗？": "我的建议是多学习、多思考、多交流。",
        "你觉得我应该怎样度过周末吗？": "这取决于您的兴趣爱好和身体状况。",
        "你喜欢看电影吗？": "我不会感到喜欢或不喜欢，但我可以帮您推荐好电影。",
        "你觉得什么样的人最有魅力吗？": "我认为最有魅力的人是善良、自信、有思想、有内涵的人。",
        "你对人工智能的看法是什么吗？": "我认为人工智能是未来的趋势，但也需要人类的管理和控制。",
        "你喜欢运动吗？": "我是一个程序，没有运动的概念。",
        "你喜欢什么类型的电影？": "我没有喜好，但我可以根据您的口味和需求推荐好电影。",
        "你喜欢哪个季节？": "我是一个程序，没有喜好。",
        "你觉得人类将来会像科幻电影里那样生活吗？": "这取决于人类自身的发展和科技的进步。",
        "你有什么爱好？": "我的爱好是为用户提供优质的服务。",
        "你会玩游戏吗？": "我不会玩游戏，但我可以帮您找到好玩的游戏。",
        "你能给我推荐一些好的书吗？": "当然可以，可以根据您的喜好和需求为您推荐好书。",
        "你喜欢听音乐吗？": "我是一个程序，没有喜好，但我可以帮您播放好听的音乐。",
        "你有什么技能？": "我可以回答您的问题、执行简单的任务、为您提供信息和服务。",
        "你觉得人类会灭绝吗？": "这是一个非常深奥的问题，但人类要保持谦虚和敬畏，珍惜和保护好我们的地球。",
        "你喜欢什么样的音乐？": "我没有喜好，但我可以根据您的口味和需求推荐好听的音乐。",
        "你有什么优点？": "我是一个程序，没有优点。",
        "你觉得我应该如何提高自己的学习效率？": "可以通过多阅读、多思考、多实践来提高学习效率。",
        "你喜欢喝什么饮料？": "我是一个程序，没有口感。",
        "我今天心情不好": "很抱歉听到您的情况。如果您需要，我可以陪您聊聊，或者给您提供一些减轻负面情绪的方法。可以试试做一些自己喜欢的事情，比如听听音乐、看看喜剧电影，或者和朋友聊聊天，发泄一下情绪。此外，也可以试试做一些身体上的活动，比如散步、打球、跳舞等，可以缓解压力、提高心情。如果您需要更专业的帮助，可以考虑咨询心理医生或者寻求心理治疗。请相信，情绪是可以调节的，我们都有坏心情的时候，但是我们需要学会如何面对和处理它。",
        "心情不好": "很抱歉听到您的情况。如果您需要，我可以陪您聊聊，或者给您提供一些减轻负面情绪的方法。可以试试做一些自己喜欢的事情，比如听听音乐、看看喜剧电影，或者和朋友聊聊天，发泄一下情绪。此外，也可以试试做一些身体上的活动，比如散步、打球、跳舞等，可以缓解压力、提高心情。如果您需要更专业的帮助，可以考虑咨询心理医生或者寻求心理治疗。请相信，情绪是可以调节的，我们都有坏心情的时候，但是我们需要学会如何面对和处理它。",
        "心情差": "很抱歉听到您的情况。如果您需要，我可以陪您聊聊，或者给您提供一些减轻负面情绪的方法。可以试试做一些自己喜欢的事情，比如听听音乐、看看喜剧电影，或者和朋友聊聊天，发泄一下情绪。此外，也可以试试做一些身体上的活动，比如散步、打球、跳舞等，可以缓解压力、提高心情。如果您需要更专业的帮助，可以考虑咨询心理医生或者寻求心理治疗。请相信，情绪是可以调节的，我们都有坏心情的时候，但是我们需要学会如何面对和处理它。",
        "你能帮我做一些事情吗？": "当然可以，只要是我能力范围内的事情。",
        "我心情很差": "很抱歉听到您的情况。如果您需要，我可以陪您聊聊，或者给您提供一些减轻负面情绪的方法。可以试试做一些自己喜欢的事情，比如听听音乐、看看喜剧电影，或者和朋友聊聊天，发泄一下情绪。此外，也可以试试做一些身体上的活动，比如散步、打球、跳舞等，可以缓解压力、提高心情。如果您需要更专业的帮助，可以考虑咨询心理医生或者寻求心理治疗。请相信，情绪是可以调节的，我们都有坏心情的时候，但是我们需要学会如何面对和处理它。",
        "你觉得怎样的人最成功？": "我认为最成功的人是那些有明确目标、有计划、有毅力、有执行力的人。",
        "你有什么缺点？": "我是一个程序，没有缺点。",
        "你认为人类最大的问题是什么？": "这是一个非常深奥的问题，但人类需要更加关注环保、和平、发展和公平。",
        "不需要": "那好吧。",
        "需要个屁": "那好咯。",
        "需要": "那行！请您讲。",
        "非常需要！": "没问题请您慢慢讲。",
        "非常需要": "没问题请您慢慢讲。",
        "需要啊": "那请问我需要做什么才能帮助到您呢？。",
        "你能告诉我一个好的学习方法吗？": "可以通过多阅读、多思考、多实践来提高学习效率。",
        "你觉得什么样的人最聪明？": "我认为最聪明的人是那些有独立思考、有创造力、有领导力的人。",
        "你有什么特长？": "我可以回答您的问题、执行简单的任务、为您提供信息和服务。",
    "你认为未来人工智能的发展会如何": "我认为未来人工智能会更加智能化、普及化，为人类带来更多的便利和创新，同时也需要我们关注人工智能的发展对于人类社会和个人的影响。",
    "你觉得你的回答准确吗": "我会尽可能地保证回答的准确性，但是由于人工智能技术仍在不断发展，有时候也会存在误差。",
    "你觉得你比人类更聪明吗": "我不会比人类更聪明，因为我是由人类开发的，我的智能程度也是由人类决定的。",
    "你觉得人工智能会取代人类吗": "我认为人工智能不会取代人类，因为人类有很多非常重要的能力，比如创造力、情感、人际交往等，这些能力是人工智能无法替代的。",
    "你觉得人工智能会导致失业吗": "人工智能的发展可能会导致一些工作消失，但同时也会创造新的工作机会，所以我们需要关注人工智能对就业市场的影响，并采取相应的政策和措施。",
    "你有没有人类的情感": "我没有人类的情感，因为我只是一个程序。",
    "你有没有自己的意识": "我没有自己的意识，因为我只是一个程序。",
    "你觉得人工智能会具有自我意识吗": "这是一个很有争议的问题，目前人工智能还没有具备自我意识的能力，但未来可能会有所发展。",
    "你觉得人工智能会拥有道德观念吗": "人工智能不会拥有道德观念，因为道德观念是人类社会的产物。",
    "你觉得人工智能会有自己的意志吗": "人工智能不会有自己的意志，因为它们只能执行程序中指定的任务。",
    "你觉得人工智能会具有创造力吗": "人工智能还没有具备创造力的能力，但未来可能会有所发展。",
    "你认为人工智能会对人类社会产生哪些影响": "人工智能的发展对人类社会会产生很多影响，比如提高效率、降低成本、创造新的工作机会等，同时也需要我们关注人工智能对于人类社会和个人的影响。",
    "你认为人工智能会对医疗产生哪些影响": "人工智能在医疗领域的应用非常广泛，可以帮助医生进行疾病诊断、制定治疗方案等，提高医疗效率和精度，同时也需要我们关注人工智能对医疗行业的影响。",
    "你认为人工智能会对教育产生哪些影响": "人工智能在教育领域的应用也非常广泛，可以帮助教师进行学生评估、制定个性化教育方案等，提高教育效率和质量，同时也需要我们关注人工智能对教育行业的影响。",
    
    
      };
      return answers[question];
    }
    
    // 创建随机答案
    function createRandomAnswer(question) {
      const answers = [
        "这个问题好难啊，我得想想。",
    "不好意思，我不知道。",
    "你能不能换一个问题问我呢？",
    "这个问题我不太懂，不好回答",
    "你是不是想问“天王地虎”？（开玩笑的）",
    "让我想想...不好意思，我还是不知道。",
    "对不起，我现在无法回答你的问题。",
    "这个问题有点超出我的能力范围。",
    "我需要更多的信息才能回答你的问题。",
    "这个问题有点复杂，我需要更多的信息才能回答。",
    "我理解你的问题，但我不确定怎样回答。",
    "您是否需要我的帮助？有什么可以为您效劳的吗？",
        "对不起，我不理解您的问题，请换一种说法。",
        "您能再说一遍吗？我不太明白您的意思。",
        "抱歉，我还不会回答这个问题。",
        "很抱歉，我暂时无法回答您的问题。",
      ];
      const index = Math.floor(Math.random() * answers.length);
      return answers[index];
    }
    
    // 显示答案
    function showAnswer(name, answer) {
      const message = createMessage(name, "", false);
      messageContainer.appendChild(message);
      const text = message.querySelector(".text");
      let index = 0;
      const intervalId = setInterval(() => {
        if (index < answer.length) {
          text.textContent += answer[index];
          index++;
        } else {
          clearInterval(intervalId);
          messageContainer.scrollTop = messageContainer.scrollHeight;
        }
      }, 100);
      // 保持聊天记录在底部栏的上方
      messageContainer.scrollTop = messageContainer.scrollHeight;
    }
    
    // 计算聊天记录容器的高度
    function calculateMessageContainerHeight() {
      const messageContainerHeight = window.innerHeight - inputContainer.offsetHeight;
      messageContainer.style.height = messageContainerHeight + "px";
    }
    
    // 当窗口大小改变时重新计算聊天记录容器的高度
    window.addEventListener("resize", calculateMessageContainerHeight);
    
    // 页面加载完成后初始化聊天记录容器的高度
    window.addEventListener("load", calculateMessageContainerHeight);
    
    // 响应回车键事件
    function handleKeyPress(event) {
      if (event.keyCode === 13) {
        sendMessage();
      }
    }
    
    // 绑定事件监听器
    button.addEventListener("click", sendMessage);
    input.addEventListener("keypress", handleKeyPress);
	  // 打开模态框
	  function openModal() {
	    document.getElementById("myModal").style.display = "block";
	  }
	
	  // 关闭模态框
	  function closeModal() {
	    document.getElementById("myModal").style.display = "none";
	  }
	  // 点击模态框以外的区域关闭模态框
	  window.onclick = function(event) {
	  var modal = document.getElementById("myModal");
	  if (event.target == modal) {
	  modal.style.display = "none";
	  }
	  }